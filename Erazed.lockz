
--Made by : https://v3rmillion.net/member.php?action=profile&uid=244024
-- init
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/zxciaz/VenyxUI/main/Reuploaded"))() --someone reuploaded it so I put it in place of the original back up so guy can get free credit.
local venyx = library.new("ERAZED LOCKZ", 5013109572)

-- themes
local themes = {
Background = Color3.fromRGB(24, 24, 24),
Glow = Color3.fromRGB(0, 0, 0),
Accent = Color3.fromRGB(10, 10, 10),
LightContrast = Color3.fromRGB(20, 20, 20),
DarkContrast = Color3.fromRGB(14, 14, 14),  
TextColor = Color3.fromRGB(255, 255, 255)
}

-- first page
local page = venyx:addPage("Legit", 5012544693)

local page2 = venyx:addPage("Player", 5012544693)

local section1 = page:addSection("Aim")



section1:addButton("Cam Lock", function()
  getgenv().Aimbot = {
    Status = true,
    Keybind  = 'C',
    Hitpart = 'HumanoidRootPart',
    ['Prediction'] = {
        X = 0,
        Y = 0,
    },
}
 
if getgenv().AimbotRan then
    return
else
    getgenv().AimbotRan = true
end
-- make it reexecutable to update settings
 
 
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local Players = game:GetService('Players')
 
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
 
local Player = nil -- Our target player
 
 
local GetClosestPlayer = function() -- // Optimized GetClosestPlayer i believe?
    local ClosestDistance, ClosestPlayer = 100000, nil
    for _, Player : Player in pairs(Players:GetPlayers()) do
        if Player.Name ~= LocalPlayer.Name and Player.Character and Player.Character:FindFirstChild('HumanoidRootPart') then
            local Root, Visible = Camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position)
            if not Visible then
                continue
            end
            Root = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(Root.X, Root.Y)).Magnitude
            if Root < ClosestDistance then
                ClosestPlayer = Player
                ClosestDistance = Root
            end
        end
    end
    return ClosestPlayer
end
 
Mouse.KeyDown:Connect(function(key) -- Get our closest player (toggle)
    if key == Aimbot.Keybind:lower() then
        Player = not Player and GetClosestPlayer() or nil
    end
end)
 
RunService.RenderStepped:Connect(function()
    if not Player then
        return
    end
    if not Aimbot.Status then
        return
    end
    local Hitpart = Player.Character:FindFirstChild(Aimbot.Hitpart)
    if not Hitpart then
        return
    end
Camera.CFrame = CFrame.new(Camera.CFrame.Position, Hitpart.Position + Hitpart.Velocity * Vector3.new(Aimbot.Prediction.X, Aimbot.Prediction.Y, Aimbot.Prediction.X))
end)

print("Clicked")
end)


section1:addButton("Anti Lock", function()
  getgenv().Sky = true 
getgenv().SkyAmount = 825

game:GetService("RunService").heartbeat:Connect(function()
    if getgenv().Sky ~= false then 
    local vel = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0,      getgenv().SkyAmount,0) 
    game:GetService("RunService").RenderStepped:Wait()
    game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = vel
    end 
end)
print("Clicked")
end)


local section2 = page:addSection("Visuals")


section2:addButton("Name ESP", function()
  local function createRGBNameTag(player)
    local tag = Instance.new("BillboardGui")
    tag.Name = player.Name .. "_NameTag"
    tag.Adornee = player.Character:FindFirstChild("HumanoidRootPart")
    tag.Size = UDim2.new(0, 100, 0, 50)
    tag.StudsOffset = Vector3.new(0, 3, 0)
    tag.AlwaysOnTop = true  -- Ensures the text label is rendered on top of other objects
 
    local label = Instance.new("TextLabel")
    label.Parent = tag
    label.Size = UDim2.new(1, 0, 1, 0)
    label.Text = player.Name
    label.TextColor3 = Color3.new(math.random(), math.random(), math.random())
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.SourceSansBold
    label.TextScaled = true
 
    tag.Parent = game.Workspace.CurrentCamera
end
 
-- Function to update RGB name tag color
local function updateRGBNameTagColor(player)
    local tag = game.Workspace.CurrentCamera:FindFirstChild(player.Name .. "_NameTag")
    if tag then
        local label = tag:FindFirstChild("TextLabel")
        if label then
            label.TextColor3 = Color3.new(math.random(), math.random(), math.random())
        end
    end
end
 
-- Function to create RGB name tags for all players
local function createAllRGBNameTags()
    for _, player in ipairs(game.Players:GetPlayers()) do
        createRGBNameTag(player)
    end
end
 
-- Create RGB name tags for all players initially
createAllRGBNameTags()
 
-- Periodically create RGB name tags for all players every 5 seconds
while true do
    wait(5)
    createAllRGBNameTags()
end
 
  print("Clicked")
  end)


section2:addButton("Box ESP", function()
  -- Settings
local Settings = {
  Box_Color = Color3.fromRGB(255, 0, 0),
  Box_Thickness = 2,
  Team_Check = false,
  Team_Color = false,
  Autothickness = true
}

--Locals
local Space = game:GetService("Workspace")
local Player = game:GetService("Players").LocalPlayer
local Camera = Space.CurrentCamera

-- Locals
local function NewLine(color, thickness)
  local line = Drawing.new("Line")
  line.Visible = false
  line.From = Vector2.new(0, 0)
  line.To = Vector2.new(0, 0)
  line.Color = color
  line.Thickness = thickness
  line.Transparency = 1
  return line
end

local function Vis(lib, state)
  for i, v in pairs(lib) do
      v.Visible = state
  end
end

local function Colorize(lib, color)
  for i, v in pairs(lib) do
      v.Color = color
  end
end

local Black = Color3.fromRGB(0, 0, 0)

local function Rainbow(lib, delay)
  for hue = 0, 1, 1/30 do
      local color = Color3.fromHSV(hue, 0.6, 1)
      Colorize(lib, color)
      wait(delay)
  end
  Rainbow(lib)
end
--Main Draw Function
local function Main(plr)
  repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
  local R15
  if plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
      R15 = true
  else 
      R15 = false
  end
  local Library = {
      TL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
      TL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

      TR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
      TR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

      BL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
      BL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

      BR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
      BR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness)
  }
  coroutine.wrap(Rainbow)(Library, 0.15)
  local oripart = Instance.new("Part")
  oripart.Parent = Space
  oripart.Transparency = 1
  oripart.CanCollide = false
  oripart.Size = Vector3.new(1, 1, 1)
  oripart.Position = Vector3.new(0, 0, 0)
  --Updater Loop
  local function Updater()
      local c 
      c = game:GetService("RunService").RenderStepped:Connect(function()
          if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
              local Hum = plr.Character
              local HumPos, vis = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position)
              if vis then
                  oripart.Size = Vector3.new(Hum.HumanoidRootPart.Size.X, Hum.HumanoidRootPart.Size.Y*1.5, Hum.HumanoidRootPart.Size.Z)
                  oripart.CFrame = CFrame.new(Hum.HumanoidRootPart.CFrame.Position, Camera.CFrame.Position)
                  local SizeX = oripart.Size.X
                  local SizeY = oripart.Size.Y
                  local TL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, SizeY, 0)).p)
                  local TR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, SizeY, 0)).p)
                  local BL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, -SizeY, 0)).p)
                  local BR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, -SizeY, 0)).p)

                  if Settings.Team_Check then
                      if plr.TeamColor == Player.TeamColor then
                          Colorize(Library, Color3.fromRGB(0, 255, 0))
                      else 
                          Colorize(Library, Color3.fromRGB(255, 0, 0))
                      end
                  end

                  if Settings.Team_Color then
                      Colorize(Library, plr.TeamColor.Color)
                  end

                  local ratio = (Camera.CFrame.p - Hum.HumanoidRootPart.Position).magnitude
                  local offset = math.clamp(1/ratio*750, 2, 300)

                  Library.TL1.From = Vector2.new(TL.X, TL.Y)
                  Library.TL1.To = Vector2.new(TL.X + offset, TL.Y)
                  Library.TL2.From = Vector2.new(TL.X, TL.Y)
                  Library.TL2.To = Vector2.new(TL.X, TL.Y + offset)

                  Library.TR1.From = Vector2.new(TR.X, TR.Y)
                  Library.TR1.To = Vector2.new(TR.X - offset, TR.Y)
                  Library.TR2.From = Vector2.new(TR.X, TR.Y)
                  Library.TR2.To = Vector2.new(TR.X, TR.Y + offset)

                  Library.BL1.From = Vector2.new(BL.X, BL.Y)
                  Library.BL1.To = Vector2.new(BL.X + offset, BL.Y)
                  Library.BL2.From = Vector2.new(BL.X, BL.Y)
                  Library.BL2.To = Vector2.new(BL.X, BL.Y - offset)

                  Library.BR1.From = Vector2.new(BR.X, BR.Y)
                  Library.BR1.To = Vector2.new(BR.X - offset, BR.Y)
                  Library.BR2.From = Vector2.new(BR.X, BR.Y)
                  Library.BR2.To = Vector2.new(BR.X, BR.Y - offset)

                  Vis(Library, true)

                  if Settings.Autothickness then
                      local distance = (Player.Character.HumanoidRootPart.Position - oripart.Position).magnitude
                      local value = math.clamp(1/distance*100, 1, 4) --0.1 is min thickness, 6 is max
                      for u, x in pairs(Library) do
                          x.Thickness = value
                      end
                  else 
                      for u, x in pairs(Library) do
                          x.Thickness = Settings.Box_Thickness
                      end
                  end
              else 
                  Vis(Library, false)
              end
          else 
              Vis(Library, false)
              if game:GetService("Players"):FindFirstChild(plr.Name) == nil then
                  for i, v in pairs(Library) do
                      v:Remove()
                      oripart:Destroy()
                  end
                  c:Disconnect()
              end
          end
      end)
  end
  coroutine.wrap(Updater)()
end

-- Draw Boxes
for i, v in pairs(game:GetService("Players"):GetPlayers()) do
  if v.Name ~= Player.Name then
    coroutine.wrap(Main)(v)
  end
end

game:GetService("Players").PlayerAdded:Connect(function(newplr)
  coroutine.wrap(Main)(newplr)
end)
print("Clicked")
end)



section2:addButton("View Tracer", function()
  -- Preview: https://gyazo.com/02cfb4aa8659ba5f6ee67a90514cc34d
-- Made by Blissful#4992
local Settings = {
  Color = Color3.fromRGB(255, 203, 138), -- Color of the line
  Thickness = 1, -- Thickness of the line (Overruled by AutoThickness if activated)
  Transparency = 1, -- 1 Visible - 0 Not Visible
  AutoThickness = true, -- Makes Thickness above futile, scales according to distance, good for less encumbered screen
  Length = 15, -- In studs of the line
  Smoothness = 0.2 -- 0.01 - Less Smooth(Faster), 1 - Smoother (Slower)
}

local toggle = true -- use this variable if you wanna integrate into a GUI

local player = game:GetService("Players").LocalPlayer
local camera = game:GetService("Workspace").CurrentCamera

local function ESP(plr) --//Main function handling specific plr loop esp for line etc
  local line = Drawing.new("Line") --// Parse and Set the line for tracer
  line.Visible = false
  line.From = Vector2.new(0, 0)
  line.To = Vector2.new(0, 0)
  line.Color = Settings.Color
  line.Thickness = Settings.Thickness
  line.Transparency = Settings.Transparency

  local function Updater() --// Function to update the ESP therefore, line destinations etc every /render/
      local connection
      connection = game:GetService("RunService").RenderStepped:Connect(function() -- Putting function in a connection var in order to disconnect if needed, to save performance
          if toggle and plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
              local headpos, OnScreen = camera:WorldToViewportPoint(plr.Character.Head.Position)
              if OnScreen then -- checks if player is on screen or not
                  local offsetCFrame = CFrame.new(0, 0, -Settings.Length)
                  local check = false
                  line.From = Vector2.new(headpos.X, headpos.Y)
                  if Settings.AutoThickness then
                      local distance = (player.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).magnitude --//AutoThickness
                      local value = math.clamp(1/distance*100, 0.1, 3) --0.1 is min thickness, 4 is max
                      line.Thickness = value
                  end
                  repeat
                      local dir = plr.Character.Head.CFrame:ToWorldSpace(offsetCFrame)
                      offsetCFrame = offsetCFrame * CFrame.new(0, 0, Settings.Smoothness)
                      local dirpos, vis = camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
                      if vis then
                          check = true
                          line.To = Vector2.new(dirpos.X, dirpos.Y)
                          line.Visible = true
                          offsetCFrame = CFrame.new(0, 0, -Settings.Length)
                      end
                  until check == true
              else 
                  line.Visible = false
              end
          else 
              line.Visible = false
              if game.Players:FindFirstChild(plr.Name) == nil then
                  connection:Disconnect()
              end
          end
      end)
  end
  coroutine.wrap(Updater)()
end

for i, v in pairs(game:GetService("Players"):GetPlayers()) do
  if v.Name ~= player.Name then
      coroutine.wrap(ESP)(v)
  end
end

game.Players.PlayerAdded:Connect(function(newplr)
  if newplr.Name ~= player.Name then
      coroutine.wrap(ESP)(newplr)
  end
end)
  print("Clicked")
  end)


section2:addButton("FOV Changer (K)(L)", function()
  local route = setmetatable({}, {
    __index = function(self, args)
        return game.GetService(game, args);
    end
})

local workSpace = route.Workspace;
local camera = workSpace.CurrentCamera;
local runService = route.RunService;
local contextActionService = route.ContextActionService;

local FieldOfVision = 90;

local plusKey, minusKey = 'K', 'L';

coroutine.resume(coroutine.create(function() --For games that try to lock your FOV
    while runService.Heartbeat:Wait() do
        camera.FieldOfView = FieldOfVision;
    end
end))

function addFieldOfView(actionName:string, properties:EnumItem)
    if actionName == 'add' then
        if properties == Enum.UserInputState.Begin then
            FieldOfVision += 5;
        end
    end
end

function minusFieldOfView(actionName:string, properties:EnumItem)
    if actionName == 'minus' then
        if properties == Enum.UserInputState.Begin then
            FieldOfVision -= 5;
        end
    end
end

contextActionService:BindAction('add', addFieldOfView, true, Enum.KeyCode[plusKey]);
contextActionService:BindAction('minus', minusFieldOfView, true, Enum.KeyCode[minusKey]);
print("Clicked")
end)




section2:addKeybind("Toggle Keybind", Enum.KeyCode.One, function()
  print("Activated Keybind")
  venyx:toggle()
  end, function()
  print("Changed Keybind")
  end)
  

local section3 = page2:addSection("Movement")

section3:addButton("Speed Hack (X)", function()
     --If Taken, Give Credits @hellokittysouljia or @killserver on discord or https://github.com/Not-Kyle
if not getgenv()['CoryuSprint'] then
  getgenv()['CoryuSprint'] = true
  
  local trace = setmetatable({}, {
      __index = function(self, args)
          return game.GetService(game, args);
      end
  })

  getgenv().players = trace.Players;
  getgenv().host = players.LocalPlayer;
  getgenv().runService = trace.RunService;
  getgenv().vector = Vector3.new;
  getgenv().userInput = trace.UserInputService;
  getgenv().http = trace.HttpService;
  getgenv().workspace = trace.Workspace;
  getgenv().scriptName, version = 'hellokittysouljias', 2.1;
  getgenv().starterGui = trace.StarterGui;
  getgenv().userNotifications = function(title, text) starterGui:SetCore('SendNotification', {Title = title; Text = text;}) end;
  local coryuBlinkFile;
  task.spawn(function() if not isfolder('Coryu') then makefolder('Coryu') elseif not isfolder('Coryu/Universal') then makefolder('Coryu/Universal') end end);
  pcall(function() coryuBlinkFile = readfile('Coryu/Universal/CoryuBlink.json') end);
  task.spawn(function() pcall(function() if game.PlaceId == 455366377 or workspace:FindFirstChild'TPer' then scriptName = 'hellokittysouljias Blink'; else scriptName = 'hellokittysouljias Sprint'; end end) end);

  local file = {
      ['Blink'] = true;
      ['Blinking'] = false;
      ['BlinkSpeed'] = 8;
      ['Toggle'] = 'B';
      ['Prefix'] = '-';
      ['Method'] = 'md';
  };
  local movement = {
      ['W'] = false;
      ['A'] = false;
      ['S'] = false;
      ['D'] = false;
  };

  coroutine.resume(coroutine.create(function()
      if coryuBlinkFile then
          coryuBlinkFile = http:JSONDecode(readfile'Coryu/Universal/CoryuBlink.json')
          for i,v in next, file do
              file[i] = coryuBlinkFile[i]
          end
          writefile('Coryu/Universal/CoryuBlink.json', http:JSONEncode(file))
      else
          coryuBlinkFile = writefile('Coryu/Universal/CoryuBlink.json', http:JSONEncode(file))
      end
  end))

  local function writeExe()
      if writefile and readfile then
          writefile('Coryu/Universal/CoryuBlink.json', http:JSONEncode(file))
      else
          return nil
      end
  end

  runService.RenderStepped:Connect(function()
      local humanoidRootPart = host.Character:FindFirstChild'HumanoidRootPart'
      if file.Blink then
          if file.Blinking then
              if host and host.Character then
                  if file.Method == 'md' or file.Method == 'movedirection' then
                      debug.profilebegin('Coryu::Blink::MoveDirection')
                          humanoidRootPart.CFrame = humanoidRootPart.CFrame + vector(
                              host.Character:FindFirstChild'Humanoid'.MoveDirection.X * file.BlinkSpeed / 5, 0, host.Character:FindFirstChild'Humanoid'.MoveDirection.Z * file.BlinkSpeed / 5
                          )
                      debug.profileend()
                  elseif file.Method == 'cf' or file.Method == 'cframe' then
                      debug.profilebegin('Coryu::Blink::CFrame')
                          if movement.W then
                              humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0,0,-file.BlinkSpeed/5)
                          end
                          if movement.A then
                              humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(-file.BlinkSpeed/5,0,0)
                          end
                          if movement.S then
                              humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0,0,file.BlinkSpeed/5)
                          end
                          if movement.D then
                              humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(file.BlinkSpeed/5,0,0)
                          end
                      debug.profileend()
                  elseif file.Method == 'lv' or file.Method == 'lookvector' then
                      debug.profilebegin('Coryu::Blink::LookVector')
                          humanoidRootPart.Velocity = humanoidRootPart.CFrame.LookVector * file.BlinkSpeed * 25
                      debug.profileend()
                  elseif file.Method == 'ws' or file.Method == 'walkspeed' then
                      debug.profilebegin('Coryu::Blink::WalkSpeed')
                          workspace[host.Name].Character:FindFirstChildOfClass'Humanoid'.WalkSpeed = file.BlinkSpeed * 25
                      debug.profileend()
                  end
              end
          end
      end
  end)

  host.Chatted:Connect(function(userCommands)
      if string.sub(string.lower(userCommands),1,4) == (file.Prefix..'bs ') then
          file.BlinkSpeed = string.sub(userCommands,5,6)
          userNotifications('Coryu Sprint', 'Sprint Speed is now '..tonumber(file.BlinkSpeed))
          writeExe()
      elseif string.sub(string.lower(userCommands),1,5) == (file.Prefix..'key ') then
          file.Toggle = string.sub(string.upper(userCommands),6,6)
          userNotifications('Coryu Sprint', 'Sprint Keybind has been updated to '..tostring(file.Toggle))
          writeExe()
      elseif string.sub(string.lower(userCommands),1,8) == (file.Prefix..'prefix ') then
          file.Prefix = string.sub(userCommands,9,9)
          userNotifications('Coryu Sprint', 'Sprint Prefix has been set to \''..file.Prefix..'\'')
          writeExe()
      elseif string.sub(string.lower(userCommands),1,8) == (file.Prefix..'method ') then
          file.Method = string.sub(userCommands,9,21)
          userNotifications('Coryu Sprint', 'Sprint Method has been set to '..tostring(file.Method))
          writeExe()
      end
  end)

  userInput.InputBegan:Connect(function(args, chat)
      if args.KeyCode == Enum.KeyCode.LeftShift then
          file.Blinking = true
      elseif chat then
          return nil
      elseif args.KeyCode == Enum.KeyCode[file.Toggle] then
          file.Blink = not file.Blink
          userNotifications('Coryu Sprint', 'Sprint is now '..tostring(file.Blink))
      elseif args.KeyCode == Enum.KeyCode.W then
          movement.W = true
      elseif args.KeyCode == Enum.KeyCode.A then
          movement.A = true
      elseif args.KeyCode == Enum.KeyCode.S then
          movement.S = true
      elseif args.KeyCode == Enum.KeyCode.D then
          movement.D = true
      end
  end)

  userInput.InputEnded:Connect(function(args)
      if args.KeyCode == Enum.KeyCode.LeftShift then
          file.Blinking = false;
      elseif args.KeyCode == Enum.KeyCode.W then
          movement.W = false
      elseif args.KeyCode == Enum.KeyCode.A then
          movement.A = false
      elseif args.KeyCode == Enum.KeyCode.S then
          movement.S = false
      elseif args.KeyCode == Enum.KeyCode.D then
          movement.D = false
      end
  end)

  print([[	
      Prefix '-'

      COMMANDS = {
          -Bs (Number) 
              // Changes your speed

          -Key (Character) 
              // Changes your keybind

          -Prefix (Any) 
              // Changes your prefix

          -Method (Md, Cf, Lv, Ws) or (MoveDirection, CFrame, LookVector, WalkSpeed)
              // Changes how you move or function
      }
      
      Example: -BS 5
      Example: -KEY H
      Example: -PREFIX .
      Example: -METHOD CF
      
      >>><<<

     
  ]])
  print('Toggle Key '..file.Toggle)

  userNotifications(scriptName..' V'..version, 'Loaded Succesfully. Press F9 for help!')
end
  print("Clicked")
  end)



-- second page
local theme = venyx:addPage("Settings", 5012544693)
local colors = theme:addSection("Colors")

for theme, color in pairs(themes) do -- all in one theme changer, i know, im cool
colors:addColorPicker(theme, color, function(color3)
venyx:setTheme(theme, color3)
end)
end

-- load
venyx:SelectPage(venyx.pages[1], true) -- no default for more freedom
